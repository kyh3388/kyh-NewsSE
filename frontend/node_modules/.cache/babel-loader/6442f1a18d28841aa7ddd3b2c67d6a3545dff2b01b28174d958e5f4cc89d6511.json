{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimmm\\\\Desktop\\\\kyh-NewsSE\\\\NewsSE\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n/*************** 메인 페이지 출력 ***************/\n/********************************************/\n\n/*************** 시간 표시를 위한 함수 ***************/\n// 현재 시간을 기준으로 1분전, 1시간전 이렇게 표시\n// 하루가 넘어가면 11.12 이렇게 당일 날짜로 표시\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction formatTimeDifference(pubDate) {\n  const publishedDate = new Date(pubDate);\n  const now = new Date();\n\n  // 날짜 부분만 비교하기 위해 각 날짜의 연월일을 추출\n  const publishedYear = publishedDate.getFullYear();\n  const publishedMonth = publishedDate.getMonth();\n  const publishedDay = publishedDate.getDate();\n  const currentYear = now.getFullYear();\n  const currentMonth = now.getMonth();\n  const currentDay = now.getDate();\n\n  // 기사 날짜가 전날인 경우\n  if (publishedYear === currentYear && publishedMonth === currentMonth && currentDay - publishedDay === 1) {\n    return `${publishedDate.getMonth() + 1}.${publishedDate.getDate()}`;\n  }\n\n  // 시간 차이를 분 단위로 계산\n  const diffInMs = now - publishedDate;\n  const diffInMinutes = Math.floor(diffInMs / 60000);\n  if (diffInMinutes < 1) return '방금 전';\n  if (diffInMinutes < 60) return `${diffInMinutes}분 전`;\n  const diffInHours = Math.floor(diffInMinutes / 60);\n  if (diffInHours < 24) return `${diffInHours}시간 전`;\n\n  // 그 외의 경우 MM.DD 형식으로 표시\n  return `${publishedDate.getMonth() + 1}.${publishedDate.getDate()}`;\n}\n\n/********************************************/\n\nfunction App() {\n  _s();\n  const [news, setNews] = useState([]);\n  const [page, setPage] = useState(1); // 페이지 상태 추가\n  const displayCount = 36; // 한 번에 가져올 기사 수\n\n  const fetchNews = currentPage => {\n    // API 요청 시 시작 인덱스 계산\n    const start = (currentPage - 1) * displayCount + 1;\n    axios.get(`http://localhost:8080/searchNews?query=검색어&display=${displayCount}&start=${start}`).then(response => {\n      // API 응답 확인(items에 어떤 항목들이 있는지 확인)\n      console.log('API 응답 데이터:', response.data);\n\n      // 전체 JSON 응답에서 items 배열만 사용하겠다는 의미.\n      // 기존 뉴스에 새로 가져온 뉴스 추가 할 수 있음.\n      setNews(prevNews => [...prevNews, ...response.data.items]);\n    }).catch(error => {\n      console.error('Error fetching news:', error);\n    });\n  };\n\n  // 첫 페이지의 기사를 가져옴\n  useEffect(() => {\n    fetchNews(page);\n  }, [page]);\n\n  // \"기사 더 보기\" 버튼을 누르면 페이지 증가\n  const handleLoadMore = () => {\n    setPage(prevPage => prevPage + 1);\n  };\n\n  /*************** 메인 페이지 출력 ***************/\n  // 배치(제목,시간,원문링크)\n  // \"기사 더보기\" 버튼\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [news.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: item.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this), \" \", formatTimeDifference(item.pubDate)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: item.link,\n        target: \"blank\",\n        rel: \"noopener noreferrer\",\n        children: \"\\uAE30\\uC0AC \\uC6D0\\uBB38 \\uBCF4\\uB7EC\\uAC00\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 6\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLoadMore,\n      children: \"\\uAE30\\uC0AC \\uB354\\uBCF4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 3\n  }, this);\n\n  // href : 하이퍼링크 연결\n  // target=\"blank\" : 새 탭에서 화면 열기\n  // rel=\"noopener noreferrer\" : 보안과 프라이버시 보호를 위해 새 탭에서 열린 페이지가 원래 페이지에 접근하지 못하게 하고, 원래 페이지의 참조 정보도 전달되지 않도록 한다\n  /********************************************/\n}\n_s(App, \"fdNeVGZewWrJETNT3+WPHnppYCY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","formatTimeDifference","pubDate","publishedDate","Date","now","publishedYear","getFullYear","publishedMonth","getMonth","publishedDay","getDate","currentYear","currentMonth","currentDay","diffInMs","diffInMinutes","Math","floor","diffInHours","App","_s","news","setNews","page","setPage","displayCount","fetchNews","currentPage","start","get","then","response","console","log","data","prevNews","items","catch","error","handleLoadMore","prevPage","className","children","map","item","index","title","fileName","_jsxFileName","lineNumber","columnNumber","href","link","target","rel","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kimmm/Desktop/kyh-NewsSE/NewsSE/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\n/*************** 메인 페이지 출력 ***************/\r\n/********************************************/\r\n\r\n\r\n\r\n/*************** 시간 표시를 위한 함수 ***************/\r\n// 현재 시간을 기준으로 1분전, 1시간전 이렇게 표시\r\n// 하루가 넘어가면 11.12 이렇게 당일 날짜로 표시\r\n\r\nfunction formatTimeDifference(pubDate) {\r\n    const publishedDate = new Date(pubDate);\r\n    const now = new Date();\r\n    \r\n    // 날짜 부분만 비교하기 위해 각 날짜의 연월일을 추출\r\n    const publishedYear = publishedDate.getFullYear();\r\n    const publishedMonth = publishedDate.getMonth();\r\n    const publishedDay = publishedDate.getDate();\r\n\r\n    const currentYear = now.getFullYear();\r\n    const currentMonth = now.getMonth();\r\n    const currentDay = now.getDate();\r\n\r\n    // 기사 날짜가 전날인 경우\r\n    if (\r\n        publishedYear === currentYear &&\r\n        publishedMonth === currentMonth &&\r\n        currentDay - publishedDay === 1\r\n    ) {\r\n        return `${publishedDate.getMonth() + 1}.${publishedDate.getDate()}`;\r\n    }\r\n\r\n    // 시간 차이를 분 단위로 계산\r\n    const diffInMs = now - publishedDate;\r\n    const diffInMinutes = Math.floor(diffInMs / 60000);\r\n\r\n    if (diffInMinutes < 1) return '방금 전';\r\n    if (diffInMinutes < 60) return `${diffInMinutes}분 전`;\r\n\r\n    const diffInHours = Math.floor(diffInMinutes / 60);\r\n    if (diffInHours < 24) return `${diffInHours}시간 전`;\r\n\r\n    // 그 외의 경우 MM.DD 형식으로 표시\r\n    return `${publishedDate.getMonth() + 1}.${publishedDate.getDate()}`;\r\n}\r\n\r\n/********************************************/\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\tconst [news, setNews] = useState([]);\r\n\tconst [page, setPage] = useState(1); // 페이지 상태 추가\r\n\tconst displayCount = 36; // 한 번에 가져올 기사 수\r\n\t\r\n\tconst fetchNews = (currentPage) => {\r\n\t\t// API 요청 시 시작 인덱스 계산\r\n\t\tconst start = (currentPage - 1) * displayCount + 1;\r\n\t\r\n\t\taxios\r\n\t\t\t.get(`http://localhost:8080/searchNews?query=검색어&display=${displayCount}&start=${start}`)\r\n\t\t\t.then(response => {\r\n\t\t\t\t// API 응답 확인(items에 어떤 항목들이 있는지 확인)\r\n\t\t\t\tconsole.log('API 응답 데이터:', response.data);\r\n\t\t\t\t\r\n\t\t\t\t// 전체 JSON 응답에서 items 배열만 사용하겠다는 의미.\r\n\t\t\t\t// 기존 뉴스에 새로 가져온 뉴스 추가 할 수 있음.\r\n\t\t\t\tsetNews((prevNews) => [...prevNews, ...response.data.items]);\r\n\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.error('Error fetching news:', error);\r\n\t\t\t});\r\n\t};\r\n\t\r\n\t// 첫 페이지의 기사를 가져옴\r\n\tuseEffect(() => {\r\n\t\tfetchNews(page);\r\n\t}, [page]);\r\n\t\r\n\t// \"기사 더 보기\" 버튼을 누르면 페이지 증가\r\n\tconst handleLoadMore = () => {\r\n\t\tsetPage(prevPage => prevPage + 1);\r\n\t};\r\n\t\r\n\t\r\n/*************** 메인 페이지 출력 ***************/\r\n// 배치(제목,시간,원문링크)\r\n// \"기사 더보기\" 버튼\r\n\r\n\treturn (\r\n\t\t<div className=\"App\"> \r\n\t\t\t{news.map((item, index) => (\r\n\t\t\t\t<div key={index}>\t\t\t\t\r\n\t\t\t\t\t<h2>{item.title}</h2>\r\n\t\t\t\t\t<p><strong></strong> {formatTimeDifference(item.pubDate)}</p>\r\n\t\t\t\t\t<a href={item.link} target=\"blank\" rel=\"noopener noreferrer\">기사 원문 보러가기</a>\r\n                </div>\r\n\t\t\t))}\r\n\t\t\t<button onClick={handleLoadMore}>기사 더보기</button>\r\n\t\t</div>\r\n\t);\r\n\r\n// href : 하이퍼링크 연결\r\n// target=\"blank\" : 새 탭에서 화면 열기\r\n// rel=\"noopener noreferrer\" : 보안과 프라이버시 보호를 위해 새 탭에서 열린 페이지가 원래 페이지에 접근하지 못하게 하고, 원래 페이지의 참조 정보도 전달되지 않도록 한다\r\n/********************************************/\r\n\t\r\n\t\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}